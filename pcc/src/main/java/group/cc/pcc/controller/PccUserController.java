package group.cc.pcc.controller;import group.cc.core.Result;import group.cc.core.ResultGenerator;import group.cc.pcc.model.PccUser;import group.cc.pcc.service.PccUserService;import com.github.pagehelper.PageHelper;import com.github.pagehelper.PageInfo;import org.springframework.web.bind.annotation.*;import io.swagger.annotations.ApiOperation;import javax.annotation.Resource;import java.util.List;import java.util.Map;/** * @author yuanli * @date 2018/11/19 */@CrossOrigin("*")@RestController@RequestMapping("/pcc/user")public class PccUserController {    @Resource    private PccUserService pccUserService;    @ApiOperation(value="添加 PccUser")    @PostMapping    public Result add(@RequestBody PccUser pccUser) {        if(pccUserService.isSign(pccUser.getEmail())) {            return ResultGenerator.genSuccessResult("repeat email");        }        pccUserService.save(pccUser);        return ResultGenerator.genSuccessResult("success");    }    @ApiOperation(value="删除 PccUser")    @DeleteMapping("/{id}")    public Result delete(@PathVariable Integer id) {        pccUserService.deleteById(id);        return ResultGenerator.genSuccessResult();    }    @ApiOperation(value="更新 PccUser")    @PutMapping    public Result update(@RequestBody PccUser pccUser) {        pccUserService.update(pccUser);        return ResultGenerator.genSuccessResult();    }    @ApiOperation(value="通过 Id 查询 PccUser 详情")    @GetMapping("/{id}")    public Result detail(@PathVariable Integer id) {        PccUser pccUser = pccUserService.findById(id);        return ResultGenerator.genSuccessResult(pccUser);    }    @ApiOperation(value="分页查询 PccUser 列表")    @GetMapping    public Result list(@RequestParam(defaultValue = "0") Integer page, @RequestParam(defaultValue = "0") Integer size) {        PageHelper.startPage(page, size);        List<PccUser> list = pccUserService.findAll();        PageInfo pageInfo = new PageInfo(list);        return ResultGenerator.genSuccessResult(pageInfo);    }    /* 新增 API */    @ApiOperation("部分属性匹配一条数据，匹配到多条抛出异常；适用于电话号码，密码查询")    @PostMapping("/detail")    public Result detail(@RequestBody PccUser pccUser) {        PccUser detail = pccUserService.get(pccUser);        Map<String, Object> userDetail = pccUserService.detail(detail.getId());        return  ResultGenerator.genSuccessResult(userDetail);    }    @ApiOperation("部分属性匹配一条数据，匹配到多条抛出异常；适用于电话号码，密码查询")    @GetMapping("/detail")    public Result detailById(@RequestParam Integer pccUserId) {        Map<String, Object> userDetail = pccUserService.detail(pccUserId);        return  ResultGenerator.genSuccessResult(userDetail);    }    @ApiOperation("获取指定 id 用户的好友列表")    @GetMapping("/friends")    public Result friends(@RequestParam Integer pccUserId) {        List<PccUser> friends = pccUserService.friends(pccUserId);        return ResultGenerator.genSuccessResult(friends);    }    @ApiOperation("获取指定 id 用户的好友列表")    @GetMapping("/friendsDetail")    public Result friends(@RequestParam Integer pccUserId,                          @RequestParam(defaultValue = "0") Integer page,                          @RequestParam(defaultValue = "0") Integer size) {        PageHelper.startPage(page, size);        List<Map<String, Object>> friends = pccUserService.friendsDetail(pccUserId);        PageInfo pageInfo = new PageInfo(friends);        return ResultGenerator.genSuccessResult(pageInfo);    }    @ApiOperation("获取指定 id 用户的好友列表")    @GetMapping("/updateImg")    public Result updateImg(@RequestParam Integer pccUserId, @RequestParam Integer pccFileId) {        pccUserService.updateImg(pccUserId, pccFileId);        return ResultGenerator.genSuccessResult();    }    @ApiOperation("修改密码")    @PostMapping("/update/password")    public Result updatePassword(@RequestParam Integer pccUserId, @RequestParam String password) {        this.pccUserService.updatePassword(pccUserId, password);        return ResultGenerator.genSuccessResult();    }}